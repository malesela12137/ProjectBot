
Task 1: Observing the IAM role settings
In this lab, you create two Lambda functions. Each function requires permissions to access the AWS resources with which they interact. 

In this task, you analyze the IAM roles and the permissions that they grant to the salesAnalysisReport and salesAnalysisReportDataExtractor Lambda functions that you create later.

Task 1.1: Observing the salesAnalysisReport IAM role settings
In the AWS Management Console, choose Services > Security, Identity, & Compliance > IAM.

In the navigation pane, choose Roles.

In the search box, enter sales

From the filtered results, choose the salesAnalysisReportRole hyperlink.

Choose the Trust relationships tab, and notice that lambda.amazonaws.com is listed as a trusted entity, which means that the Lambda service can use this role.

Choose the Permissions tab, and notice the four policies assigned to this role. To expand each role and analyze the permissions that each policy grants, choose the + icon next to each role:

AmazonSNSFullAccess provides full access to Amazon SNS resources.

AmazonSSMReadOnlyAccess provides read-only access to Systems Manager resources.

AWSLambdaBasicRunRole provides write permissions to CloudWatch logs (which are required by every Lambda function).

AWSLambdaRole gives a Lambda function the ability to invoke another Lambda function. 

The salesAnalysisReport Lambda function that you create later in this lab uses the salesAnalysisReportRole role.

Task 1.2: Observing the salesAnalysisReportDERole IAM role settings
Choose Roles again.

In the search box, enter sales

From the filtered results, choose the salesAnalysisReportDERole hyperlink.

Choose the Trust relationships tab, and notice that lambda.amazonaws.com is listed as a trusted entity.

Choose the Permissions tab, and notice the permissions granted to this role:

AWSLambdaBasicRunRole provides write permissions to CloudWatch logs.

AWSLambdaVPCAccessRunRole provides permissions to manage elastic network interfaces to connect a function to a virtual private cloud (VPC).

The salesAnalysisReportDataExtractor Lambda function that you create next uses the salesAnalysisReportDERole role.

 

Task 2: Creating a Lambda layer and a data extractor Lambda function
In this task, you first create a Lambda layer, and then you create a Lambda function that uses the layer.

Start by downloading two required files.

To download the lab files required by this task to your local machine, choose the following links:

pymysql-v3.zip

salesAnalysisReportDataExtractor-v3.zip

Note: The salesAnalysisReportDataExtractor-v3.zip file is a Python implementation of a Lambda function that makes use of the PyMySQL open-source client library to access the MySQL café database. This library has been packaged into the pymysql-v3.zip which is uploaded to Lambda layer next.

Task 2.1: Creating a Lambda Layer
In the next steps, you create a Lambda layer named pymysqlLibrary and upload the client library into it so that it can be used by any function that requires it. Lambda layers provide a flexible mechanism to reuse code between functions so that the code does not have to be included in each function’s deployment package.

In the AWS Management Console, choose Services > Compute > Lambda.

Tip: If the navigation panel is closed, choose the collapsed menu icon (three horizontal lines) to open the AWS Lambda panel.

Choose Layers.

Choose Create layer.

Configure the following layer settings:

For Name, enter pymysqlLibrary

For Description, enter PyMySQL library modules

Select Upload a .zip file. To upload the pymysql-v3.zip file, choose Upload, navigate to the folder where you downloaded the pymysql-v3.zip file, and open it.

For Compatible runtimes, choose Python 3.9.

Choose Create.

The message "Successfully created layer pymysqlLibrary version 1" is displayed.

Tip: The Lambda layers feature requires that the .zip file containing the code or library conform to a specific folder structure. The pymysqlLibary.zip file used in this lab was packaged using the following folder structure:

Lambda Layer directory structure showing python libraries used by the function .

For more information about layer paths, see Including Library Dependencies in a Layer.

Task 2.2: Creating a data extractor Lambda function
In the navigation pane, choose Functions to open the Functions dashboard page.

Choose Create function, and configure the following options:

At the top of the Create function page, select Author from scratch.

For Function name, enter salesAnalysisReportDataExtractor

For Runtime, choose Python 3.9.

Expand Change default execution role, and configure the following options:    

For Execution role, choose Use an existing role.

For Existing role:, choose salesAnalysisReportDERole.

Choose Create function.

A new page opens with the following message: "Successfully created the function salesAnalysisReportDataExtractor."

Task 2.3: Adding the Lambda layer to the function
In the Function overview panel, choose Layers.

At the bottom of the page, in the Layers panel, choose Add a layer.

On the Add layer page, configure the following options:

Choose a layer: Choose Custom layers.

Custom layers: Choose pymysqlLibrary.

Version: Choose 1.

Choose Add.

The Function overview panel shows a count of (1) in the Layers node for the function.

Task 2.4: Importing the code for the data extractor Lambda function
Go to the Lambda > Functions > salesAnalysisReportDataExtractor page.

In the Runtime settings panel, choose Edit.

For Handler, enter salesAnalysisReportDataExtractor.lambda_handler

Choose Save.

In the Code source panel, choose Upload from.

Choose .zip file.

Choose Upload, and then navigate to and select the salesAnalysisReportDataExtractor-v3.zip file that you downloaded earlier.

Choose Save.

The Lambda function code is imported and displays in the Code source panel. If necessary, in the Environment navigation pane, double-click salesAnalysisReportDataExtractor.py to display the code.

Review the Python code that implements the function.

Note: If the code does not yet display in the function code editor, refresh the console so that it displays.

Read the comments included in the code to gain an understanding of its logic flow. Notice that the function expects to receive the database connection information (dbURL, dbName, dbUser, and dbPassword) in the event input parameter.

Task 2.5: Configuring network settings for the function
The final step before you can test the function is to configure its network settings. As the architecture diagram at the start of this lab shows, this function requires network access to the café database, which runs in an EC2 LAMP instance. Therefore, you need to specify the instance’s VPC, subnet, and security group information in the function’s configuration.

Choose the Configuration tab, and then choose VPC.

Choose Edit, and configure the following options:

VPC: Choose the option with Cafe VPC as the Name.

Subnets: Choose the option with Cafe Public Subnet 1 as the Name.

Tip: You can ignore the warning (if any) that recommends choosing at least two subnets to run in high availability mode because it is not applicable to the function.

Security groups: Choose the option with CafeSecurityGroup as the Name.

Notice that the security group’s inbound and outbound rules are automatically displayed following the field.

Choose Save.

 

Task 3: Testing the data extractor Lambda function
Task 3.1: Launching a test of the Lambda function
You are now ready to test the salesAnalysisReportDataExtractor function. To invoke it, you need to supply values for the café database connection parameters. Recall that these are stored in Parameter Store.

On a new browser tab, open the AWS Management Console, and choose Services > Management & Governance > Systems Manager.

In the navigation pane, choose Parameter Store.

Choose each of the following parameter names, and copy and paste the Value of each one into a text editor document:

/cafe/dbUrl

/cafe/dbName

/cafe/dbUser

/cafe/dbPassword

Return to the Lambda Management Console browser tab. On the salesAnalysisReportDataExtractor function page, choose the Test tab.

Configure the Test event panel as follows:

For Test event action, select Create new event.

For Event name, enter SARDETestEvent

For Template, choose hello-world.

In the Event JSON pane, replace the JSON object with the following JSON object:

{
  "dbUrl": "<value of /cafe/dbUrl parameter>",
  "dbName": "<value of /cafe/dbName parameter>",
  "dbUser": "<value of /cafe/dbUser parameter>",
  "dbPassword": "<value of /cafe/dbPassword parameter>"
}
In this code, substitute the value of each parameter with the values that you pasted into a text editor in the previous steps. Enclose these values in quotation marks.

Choose Save.

Choose Test.

After a few moments, the page shows the message "Execution result: failed". 

Task 3.2: Troubleshooting the data extractor Lambda function
In the Execution result pane, choose Details to expand it, and notice that the error object returned a message similar to the following message after the function ran:

{
  "errorMessage": "2019-02-14T04:14:15.282Z ff0c3e8f-1985-44a3-8022-519f883c8412 Task timed out after 3.00 seconds"
}
This message indicates that the function timed out after 3 seconds.

The Log output section includes lines starting with the following keywords:

START indicates that the function started running.

END indicates that the function finished running.

REPORT provides a summary of the performance and resource utilization statistics related to when the function ran.

What caused this error?

Task 3.3: Analyzing and correcting the Lambda function
In this task, you analyze and correct the issue observed when you tested the Lambda function.

Here are a few hints to help you find the solution:

One of the first things that this function does is connect to the MySQL database running in a separate EC2 instance. It waits a certain amount of time to establish a successful connection. After this time passes, if the connection is unsuccessful, the function times out.

By default, a MySQL database uses the MySQL protocol and listens on port number 3306 for client access.

Choose the Configuration tab again, and choose VPC. Notice the Inbound rules for the security group that are used by the EC2 instance running the database. Is the database port number (3306) listed? You can choose the security group link if you want to edit and add an inbound rule to it.

Once you have corrected the problem, return to browser tab with the salesAnalysisReportDataExtractor function page. Choose the Test tab, and choose Test again.

You should now see a green box showing the message “Execution result: succeeded (logs).” This message indicates that the function ran successfully.

Choose Details to expand it.

The function returned the following JSON object:

{
  "statusCode": 200,
  "body": []
}
The body field, which contains the report data that the function extracted, is empty because there is no order data in the database.

Task 3.4: Placing an order and testing again
In this task, you access the café website and place some orders to populate data in the database. 

To open the café website on a new browser tab, find the public IP address of the café EC2 instance. 

The URL for the website has the format http://publicIP/cafe where publicIP is the public IP address of the café EC2 instance. There are two ways to find the public IP address:

Option 1: 

On the AWS Management Console, choose Services > Compute > EC2.

In the navigation pane, choose Instances.

Choose CafeInstance.

Copy the Public IPv4 address to a text editor. 

On a new browser tab, enter http://publicIP/cafe, and replace publicIP with the public IPv4 address that you just copied to a text editor.

Press Enter to load the café website.

Option 2:

At the top of these instruction, choose Details, and then choose Show. 

From the Credentials window, copy and paste the CafePublicIP to a text editor.

On a new browser tab, enter http://publicIP/cafe, and replace publicIP with the public IPv4 address that you just copied to a text editor.

Press Enter to load the café website.

On the café website, choose Menu, and place some orders to populate data in the database. 

Now that there is order data in the database, you test the function again. 

Go to the browser tab with the salesAnalysisReportDataExtractor function page.

Choose the Test tab, and choose Test.

The returned JSON object now contains product quantity information in the body field similar to the following:

{
  "statusCode": 200,
  "body": [
    {
      "product_group_number": 1,
      "product_group_name": "Pastries",
      "product_id": 1,
      "product_name": "Croissant",
      "quantity": 1
    },
    {
      "product_group_number": 2,
      "product_group_name": "Drinks",
      "product_id": 8,
      "product_name": "Hot Chocolate",
      "quantity": 2
     }
    ]
}
Congratulations! You have successfully created the salesAnalysisReportDataExtractor Lambda function.

 

Task 4: Configuring notifications
In this task, you create an SNS topic and then subscribe an email address to the topic.

Task 4.1: Creating an SNS topic
In this task, you create the SNS topic where the sales analysis report is published and subscribe an email address to it. The topic is responsible for delivering any message it receives to all of its subscribers. You use the Amazon SNS console for this task.

On the AWS Management Console, choose Services > Application Integration > Simple Notification Service.

In the navigation pane, choose Topics, and then choose Create topic.

Note: If the Topics link is not visible, choose the three horizontal lines icon, and then choose Topics.

The Create topic page opens.

Configure the following options:

Type: Choose Standard.

Name: Enter salesAnalysisReportTopic

Display name: Enter SARTopic

Choose Create topic.

Copy and paste the ARN value into a text editor document.

You need to specify this ARN when you configure the next Lambda function.

Task 4.2: Subscribing to the SNS topic
Choose Create subscription, and configure the following options:

Protocol: Choose Email.

Endpoint: Enter an email address that you can access.

Choose Create subscription.

The subscription is created and has a Status of Pending confirmation.

Check the inbox for the email address that you provided.

You should see an email from SARTopic with the subject "AWS Notification - Subscription Confirmation."

Open the email, and choose Confirm subscription.

A new browser tab opens and displays a page with the message "Subscription confirmed!"
